// pages/analytics/AnalyticsPage.jsx
import { useEffect, useMemo, useState } from 'react';
import { PRESETS } from './constants';
import { fmtISO, addDays } from './utils/date';
import { sortItems } from './utils/sort';
import { fetchChart, fetchGlobalStats, fetchOrders, fetchReserves } from './api';

import StatCard from './components/StatCard';
import SortControls from './components/SortControls';
import SmoothChart from './components/SmoothChart';
import ListTable from './components/ListTable';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –±—Ä–æ–Ω–µ–π:
 * - –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: –≤—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏ (–∑–∞–∫–∞–∑—ã/–±—Ä–æ–Ω–∏) –∏ –ø—Ä–µ—Å–µ—Ç—ã –¥–∞—Ç.
 * - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–≤–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–∫–∞—Ä—Ç–æ—á–∫–∏).
 * - –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ (—Å—É–º–º–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ).
 * - –î–≤–∞ —Å–ø–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π (–∑–∞–∫–∞–∑—ã –∏ –±—Ä–æ–Ω–∏).
 */
export default function AnalyticsPage() {
  // ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–≤–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–æ–±—â–∏–µ —Ü–∏—Ñ—Ä—ã –ø–æ —Å–∏—Å—Ç–µ–º–µ)
  const [stats, setStats] = useState({
    orders: 0,
    reserves: 0,
    ordersSum: 0,
    avg: 0,
    maxDay: 0,
    loading: true,
  });

  // ===== –í–µ—Ä—Ö–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (–≤–∫–ª–∞–¥–∫–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª)
  const [activeTab, setActiveTab] = useState('orders'); // 'orders' | 'reserves'
  const [preset, setPreset] = useState('7d');
  const [from, setFrom] = useState(fmtISO(addDays(new Date(), -6)));
  const [to, setTo] = useState(fmtISO(new Date()));
  const [useCustom, setUseCustom] = useState(false);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–∞—Ç (–∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ä–µ–∂–∏–º)
  useEffect(() => {
    if (preset === 'custom') {
      setUseCustom(true);
      return;
    }

    setUseCustom(false);
    const today = new Date();

    if (preset === 'all') {
      // –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è => —Å–µ—Ä–≤–µ—Ä/–ê–ü–ò —Ç—Ä–∞–∫—Ç—É–µ—Ç –∫–∞–∫ "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
      setFrom('');
      setTo('');
    } else {
      const presetDef = PRESETS.find((item) => item.key === preset);
      const days = presetDef?.days ?? 7;
      const start = addDays(today, -(days - 1));
      setFrom(fmtISO(start));
      setTo(fmtISO(today));
    }
  }, [preset]);

  // ===== –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º)
  const [chartLoading, setChartLoading] = useState(true);
  const [chartData, setChartData] = useState([]); // [{ day, count, sum }]

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        setChartLoading(true);
        const data = await fetchChart(activeTab, { from, to, preset });
        if (mounted) setChartData(Array.isArray(data) ? data : []);
      } catch {
        if (mounted) setChartData([]);
      } finally {
        if (mounted) setChartLoading(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, [activeTab, from, to, preset]);

  // ===== –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤ (–∫–∞—Ä—Ç–æ—á–∫–∏)
  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        setStats((s) => ({ ...s, loading: true }));
        const s = await fetchGlobalStats();
        if (mounted) setStats({ ...s, loading: false });
      } catch {
        if (mounted) setStats((s) => ({ ...s, loading: false }));
      }
    })();
    return () => {
      mounted = false;
    };
  }, []);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–µ—Ä–µ–≤–æ–¥ ISO ‚Üí –ø–æ–¥–ø–∏—Å—å dd.mm, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª)
  const days = useMemo(() => {
    return chartData
      .slice()
      .reverse()
      .map((r) => ({
        dayISO: r.day,
        day: new Date(r.day).toLocaleDateString('ru-RU', { month: '2-digit', day: '2-digit' }),
        count: Number(r.count || 0),
        sum: Number(r.sum || 0),
      }));
  }, [chartData]);

  // ===== –°–ø–∏—Å–∫–∏ –Ω–∏–∂–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–∑–∞–∫–∞–∑—ã –∏ –±—Ä–æ–Ω–∏)
  const [ordersList, setOrdersList] = useState([]); // [{ guest_name, total_amount, date }]
  const [reservesList, setReservesList] = useState([]);

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–ø–æ –∏–º–µ–Ω–∏ –≥–æ—Å—Ç—è –∏ —Å—É–º–º–µ)
  const [orderFilter, setOrderFilter] = useState({ q: '', min: '', max: '' });
  const [reserveFilter, setReserveFilter] = useState({ q: '', min: '', max: '' });

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–æ–≤
  const [orderSort, setOrderSort] = useState({ by: 'date', dir: 'desc' });
  const [reserveSort, setReserveSort] = useState({ by: 'date', dir: 'desc' });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const [o, r] = await Promise.all([fetchOrders(1000), fetchReserves(1000)]);
        if (!mounted) return;
        setOrdersList(o);
        setReservesList(r);
      } catch {
        if (!mounted) return;
        setOrdersList([]);
        setReservesList([]);
      }
    })();
    return () => {
      mounted = false;
    };
  }, []);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞–∫–∞–∑–∞–º
  const filteredOrders = useMemo(() => {
    const q = orderFilter.q.trim().toLowerCase();
    const min = Number(orderFilter.min || 0);
    const max = Number(orderFilter.max || 0);

    const base = ordersList.filter((it) => {
      const guest = String(it.guest_name || '').toLowerCase();
      const total = Number(it.total_amount || 0);
      const byQ = !q || guest.includes(q);
      const byMin = !min || total >= min;
      const byMax = !max || total <= max;
      return byQ && byMin && byMax;
    });

    return sortItems(base, orderSort);
  }, [ordersList, orderFilter, orderSort]);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –±—Ä–æ–Ω—è–º
  const filteredReserves = useMemo(() => {
    const q = reserveFilter.q.trim().toLowerCase();
    const min = Number(reserveFilter.min || 0);
    const max = Number(reserveFilter.max || 0);

    const base = reservesList.filter((it) => {
      const guest = String(it.guest_name || '').toLowerCase();
      const total = Number(it.total_amount || 0);
      const byQ = !q || guest.includes(q);
      const byMin = !min || total >= min;
      const byMax = !max || total <= max;
      return byQ && byMin && byMax;
    });

    return sortItems(base, reserveSort);
  }, [reservesList, reserveFilter, reserveSort]);

  // ===== –†–µ–Ω–¥–µ—Ä
  return (
    <div className="min-h-screen p-6 md:p-10 pb-24 custom-scroll">
      <h1 className="text-xl font-semibold mb-6">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –±—Ä–æ–Ω–µ–π</h1>

      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <div className="bg-white rounded-2xl shadow p-4 md:p-6 mb-6">
        <div className="flex flex-col md:flex-row md:items-center gap-4">
          {/* –¢–∞–±—ã (–ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞) */}
          <div className="flex items-center gap-2 bg-gray-100 rounded-xl p-1 w-fit">
            {['orders', 'reserves'].map((t) => (
              <button
                key={t}
                type="button"
                onClick={() => setActiveTab(t)}
                className={
                  'px-4 py-2 rounded-lg text-sm font-medium ' +
                  (activeTab === t ? 'bg-white shadow' : 'text-gray-600 hover:text-gray-900')
                }
              >
                {t === 'orders' ? '–ó–∞–∫–∞–∑—ã' : '–ë—Ä–æ–Ω–∏'}
              </button>
            ))}
          </div>

          {/* –ü—Ä–µ—Å–µ—Ç—ã (–±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞) */}
          <div className="flex flex-wrap gap-2">
            {PRESETS.map((p) => (
              <button
                key={p.key}
                type="button"
                onClick={() => setPreset(p.key)}
                className={
                  'px-3 py-1.5 rounded-lg border text-sm ' +
                  (preset === p.key
                    ? 'bg-[#17E1B1] text-white'
                    : 'bg-white text-gray-700 border-gray-200 hover:border-gray-300')
                }
              >
                {p.label}
              </button>
            ))}
          </div>

          {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã (–ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–ü–µ—Ä–∏–æ–¥‚Ä¶") */}
          {useCustom && (
            <div className="flex items-center gap-2">
              <label className="text-sm text-gray-600">—Å</label>
              <input
                type="date"
                className="border rounded-lg px-3 py-1.5"
                value={from}
                onChange={(e) => setFrom(e.target.value)}
              />
              <label className="text-sm text-gray-600">–ø–æ</label>
              <input
                type="date"
                className="border rounded-lg px-3 py-1.5"
                value={to}
                onChange={(e) => setTo(e.target.value)}
              />
            </div>
          )}
        </div>
      </div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π */}
      {stats.loading ? (
        <div className="text-gray-500 text-center mb-6">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–æ–≤‚Ä¶</div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 md:gap-6 mb-6">
          <StatCard icon="üè†" label="–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤" value={stats.orders} />
          <StatCard icon="üìÖ" label="–í—Å–µ–≥–æ –±—Ä–æ–Ω–µ–π" value={stats.reserves} />
          <StatCard
            icon="üí∞"
            label="–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤"
            value={`${stats.ordersSum.toLocaleString('ru-RU')} ‚ÇΩ`}
          />
          <StatCard
            icon="üìà"
            label="–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
            value={`${stats.avg.toLocaleString('ru-RU')} ‚ÇΩ`}
          />
        </div>
      )}

      {/* –ì—Ä–∞—Ñ–∏–∫ + –±–ª–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –¥–Ω—ë–º */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-10">
        <div className="bg-white rounded-2xl shadow p-6">
          <h2 className="font-bold mb-4 text-lg">
            {activeTab === 'orders' ? '–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (—Å—É–º–º–∞)' : '–î–∏–Ω–∞–º–∏–∫–∞ –±—Ä–æ–Ω–µ–π (–∫–æ–ª-–≤–æ)'}
          </h2>
          {chartLoading ? (
            <div className="text-gray-500 text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞‚Ä¶</div>
          ) : (
            <SmoothChart data={days} yKey={activeTab === 'orders' ? 'sum' : 'count'} height={240} />
          )}
        </div>

        <div className="bg-white rounded-2xl shadow p-6 flex flex-col items-center justify-center">
          <div className="text-6xl mb-3">üîù</div>
          <div className="text-2xl font-bold mb-2">–ú–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å</div>
          <div className="text-3xl font-mono">{stats.maxDay.toLocaleString('ru-RU')} ‚ÇΩ</div>
          <div className="text-gray-500 text-sm mt-2">–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å</div>
        </div>
      </div>

      {/* –°–ø–∏—Å–∫–∏: –ó–∞–∫–∞–∑—ã –∏ –ë—Ä–æ–Ω–∏ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –ó–∞–∫–∞–∑—ã */}
        <div className="bg-white rounded-2xl shadow">
          <div className="p-4 border-b rounded-t-2xl overflow-visible">
            <div className="font-semibold mb-3">–ó–∞–∫–∞–∑—ã</div>
            <div className="flex flex-wrap items-center gap-2">
              <input
                placeholder="–ò–º—è –≥–æ—Å—Ç—è"
                className="border rounded-lg px-3 py-1.5"
                value={orderFilter.q}
                onChange={(e) => setOrderFilter((f) => ({ ...f, q: e.target.value }))}
              />
              <input
                type="number"
                placeholder="–ú–∏–Ω, ‚ÇΩ"
                className="border rounded-lg px-3 py-1.5 w-28"
                value={orderFilter.min}
                onChange={(e) => setOrderFilter((f) => ({ ...f, min: e.target.value }))}
              />
              <input
                type="number"
                placeholder="–ú–∞–∫—Å, ‚ÇΩ"
                className="border rounded-lg px-3 py-1.5 w-28"
                value={orderFilter.max}
                onChange={(e) => setOrderFilter((f) => ({ ...f, max: e.target.value }))}
              />
              <SortControls sort={orderSort} onChange={setOrderSort} />
              <button
                type="button"
                className="ml-auto text-sm text-gray-600 hover:text-black"
                onClick={() => setOrderFilter({ q: '', min: '', max: '' })}
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>
          </div>

          <div className="rounded-b-2xl overflow-hidden">
            <ListTable items={filteredOrders} />
          </div>
        </div>

        {/* –ë—Ä–æ–Ω–∏ */}
        <div className="bg-white rounded-2xl shadow">
          <div className="p-4 border-b rounded-t-2xl overflow-visible">
            <div className="font-semibold mb-3">–ë—Ä–æ–Ω–∏</div>
            <div className="flex flex-wrap items-center gap-2">
              <input
                placeholder="–ò–º—è –≥–æ—Å—Ç—è"
                className="border rounded-lg px-3 py-1.5"
                value={reserveFilter.q}
                onChange={(e) => setReserveFilter((f) => ({ ...f, q: e.target.value }))}
              />
              <input
                type="number"
                placeholder="–ú–∏–Ω, ‚ÇΩ"
                className="border rounded-lg px-3 py-1.5 w-28"
                value={reserveFilter.min}
                onChange={(e) => setReserveFilter((f) => ({ ...f, min: e.target.value }))}
              />
              <input
                type="number"
                placeholder="–ú–∞–∫—Å, ‚ÇΩ"
                className="border rounded-lg px-3 py-1.5 w-28"
                value={reserveFilter.max}
                onChange={(e) => setReserveFilter((f) => ({ ...f, max: e.target.value }))}
              />
              <SortControls sort={reserveSort} onChange={setReserveSort} />
              <button
                type="button"
                className="ml-auto text-sm text-gray-600 hover:text-black"
                onClick={() => setReserveFilter({ q: '', min: '', max: '' })}
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>
          </div>

          <div className="rounded-b-2xl overflow-hidden">
            <ListTable items={filteredReserves} />
          </div>
        </div>
      </div>
    </div>
  );
}
